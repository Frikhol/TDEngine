#version 400

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in vec4 shadowCoords;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D shadowMap;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];

uniform float ambientValue;
uniform float diffuseValue;
uniform float smoothness;
uniform float specularValue;

const int pcfCount = 3;
const float totalTexels = (pcfCount * 2.0+1.0) * (pcfCount * 2.0+1.0);

void main(void){

    float mapSize = 16384.0;
    float texelSize = 1.0/mapSize;
    float total = 0.0;

    for(int x =- pcfCount; x<=pcfCount;x++){
        for(int y =- pcfCount; y<=pcfCount;y++){
            float objectNearestLight = texture(shadowMap,shadowCoords.xy + vec2(x,y)*texelSize).r;
            if(shadowCoords.z > objectNearestLight+0.0025){
                    total+=1.0;
            }
        }
    }

    total /= totalTexels;

    float lightFactor = 1.0 - (total*shadowCoords.w);

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalAmbient = vec3(0.0);
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for(int i = 0;i<4;i++){
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(toLightVector[i]);
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);

        float nDot1 = dot(unitNormal,unitLightVector);
        float brightness = max(nDot1,0.0);
        totalDiffuse = totalDiffuse* lightFactor + (brightness * lightColour[i])/attFactor;

        float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
        specularFactor = max(specularFactor,0.0);
        float dampedFactor = pow(specularFactor,smoothness);
        totalSpecular = totalSpecular + (dampedFactor * lightColour[i] * max(min(specularValue,1.0),0.0))/attFactor;
    }

    totalDiffuse = max(min(diffuseValue,1.0),0.0) * totalDiffuse;
    totalAmbient = max(min(ambientValue,1.0),0.0)*vec3(1.0,1.0,1.0);

    vec3 result = totalAmbient+totalDiffuse+totalSpecular;
    out_Color = vec4(result,1.0)*texture(textureSampler,pass_textureCoords);

}