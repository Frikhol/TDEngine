#version 400

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;

uniform float ambientValue;
uniform float diffuseValue;
uniform float smoothness;
uniform float specularValue;

void main(void){

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);

    vec3 ambient = max(min(ambientValue,1.0),0.0) * lightColour;

    float nDot1 = dot(unitNormal,unitLightVector);
    float brightness = max(nDot1,0.0);
    vec3 diffuse = max(min(diffuseValue,1.0),0.0) * brightness * lightColour;

    float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
    specularFactor = max(specularFactor,0.0);
    float dampedFactor = pow(specularFactor,smoothness);
    vec3 specular = dampedFactor * lightColour * max(min(specularValue,1.0),0.0);

    vec3 result = ambient+diffuse+specular;
    out_Color = vec4(result,1.0)*texture(textureSampler,pass_textureCoords);

}